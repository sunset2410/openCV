#include<unordered_map>
#include<string>
using namespace std;

// N length cua init string
// init_string[] origin string

char origin_str[500007];
int _N;

unordered_map<string, vector<int>> hashTable;

void copyStr(char* s, char* d)
{
	while (*s != '\0')
	{
		*d = *s;
		d++;
		s++;
	}
	*d = *s;
}


bool compareStr(char* s1, char* s2)
{
	while (*s1 != '\0')
	{
		if (*s1 != *s2) return false;
		s1++;
		s2++;
	}

	if (*s1 != *s2) return false;
	return true;
}


void removeVector(vector<int> &list, int value)
{
	for (vector<int>::iterator it = list.begin(); it != list.end(); it++)
	{
		if (*it > value) return;

		if (*it == value)
		{
			list.erase(it);
			return;
		}
	}
}

void insertVector(vector<int> &list, int value)
{
	for (vector<int>::iterator it = list.begin(); it != list.end(); it++)
	{
		if (*it > value)
		{
			list.insert(it, value);
			return;
		}
	}
	// ko tim ra thi insert vao cuoi
	list.push_back(value);
}

char tag[4];
void addTag(int n, char string[])
{
	if (n < 3) return;

	for (int i = 0; i <= n - 3; i++)  // i la vi tri dau tien cau tag 3 ki tu
	{
		int index = 0;
		for (int j = i; j <= i + 2; j++)
		{
			tag[index] = origin_str[j];
			index++;
		}
		tag[index] = '\0';

		//---------- add tag------------//
		insertVector(hashTable[tag], i); // insert vi tri dau tien cua tag vao hash table vector cos sap xep tu be toi lon
	}
}

void init(int N, char init_string[])
{
	_N = N;
	copyStr(init_string, origin_str);

	// add tag
	addTag(_N, origin_str);
}



// convert string A to string B
// length cua A va B deu bang 3
// return  so sub string da convert
int change(char string_A[], char string_B[])
{
	int count = 0;
	vector<int> list = hashTable[string_A];
	if (list.size() == 0) 
		return count;

	int pre = 0;
	for (vector<int>::iterator it = list.begin(); it != list.end(); it++) // for  het cac vi tri de thay string a thanh b
	{
		int index = *it;
		if (index < pre)
			continue;

		// doi string a o vi tri index thanh string b
		// xoa cÃ¡c hash tag cu
		for (int i = index - 2; i <= index + 2; i++)
		{
			if (i < 0 || i > _N-3)
				continue;

			char tag[4];
			tag[0] = origin_str[i];
			tag[1] = origin_str[i+1];
			tag[2] = origin_str[i+2];
			tag[3] = '\0';

			removeVector(hashTable[tag], i); // xoa tag
		}


		// thay string 
		origin_str[index] = string_B[0];
		origin_str[index+1] = string_B[1];
		origin_str[index+2] = string_B[2];

		// them cac hash tag moi
		for (int i = index - 2; i <= index + 2; i++)
		{
			if (i < 0 || i > _N - 3)
				continue;

			char tag[4];
			tag[0] = origin_str[i];
			tag[1] = origin_str[i + 1];
			tag[2] = origin_str[i + 2];
			tag[3] = '\0';

			insertVector(hashTable[tag], i); // them tag
		}

		// tang pre
		pre = index + 3;

		// dem so tag da bi thay the
		count++;
	}

	return count;
}

// return final string. only call 1 time  in the end of test case
void result(char ret[])
{
	copyStr(origin_str, ret);
}


int main()
{
	char initstr[50] = "baaabbbbbb";
	init(10, initstr);
	int ressult = 0;
	char temp1[20] = "baa";
	char temp2[20] = "aba";
	ressult = change(temp1, temp2);

	char temp3[20] = "aaa";
	char temp4[20] = "bba";
	ressult = change(temp3, temp4);

	char temp5[20] = "bbb";
	char temp6[20] = "abb";
	ressult = change(temp5, temp6);

	char ret[50007];
	result(ret);

	return 0;
}



/*
	vector<int> list;
	insertVector(list, 1);
	insertVector(list, 6);
	insertVector(list, 3);
	insertVector(list, 8);
	insertVector(list, 4);

*/
